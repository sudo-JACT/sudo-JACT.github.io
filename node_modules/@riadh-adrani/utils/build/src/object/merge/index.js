import { cast } from "../../index.js";
import getType from "../getType/index.js";
import hasProperty from "../hasProperty/index.js";
import { isArray, isObject } from "../index.js";
/**
 * deeply merge two or more objects.
 * @param objects to merge.
 */
export default function merge(...objects) {
    objects.forEach((o) => {
        if (!isObject(o)) {
            throw new Error(`All argument should be of type (object) but one is (${getType(o)})`);
        }
    });
    return objects.reduce((output, object) => {
        // we check if one/both object/s is/are array
        if (isArray(object)) {
            if (isArray(output)) {
                // we merge indexes
                const l1 = output.length;
                const l2 = object.length;
                for (let i = 0; i < Math.max(l1, l2); i++) {
                    if (!hasProperty(output, i)) {
                        output[i] = object[i];
                    }
                    else if (getType(cast(output)[i]) !== "object" ||
                        getType(cast(object)[i]) !== "object") {
                        output[i] = object[i];
                    }
                    else {
                        cast(output)[i] = merge(output[i], object[i]);
                    }
                }
            }
            else {
                // we replace output
                return object;
            }
        }
        else {
            Object.keys(object).forEach((key) => {
                if (!hasProperty(output, key)) {
                    cast(output)[key] = cast(object)[key];
                }
                else {
                    if (getType(cast(output)[key]) !== "object" ||
                        getType(cast(object)[key]) !== "object") {
                        cast(output)[key] = cast(object)[key];
                    }
                    else {
                        cast(output)[key] = merge(output[key], object[key]);
                    }
                }
            });
        }
        return output;
    }, {});
}
