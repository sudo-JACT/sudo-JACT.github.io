import { getType } from "../index.js";
/**
 * detects if the given key have a circular dependency within.
 * @param o object
 * @param key key
 * @param visited additional objects to test against
 */
export const keyHasCircularDependency = (o, key, visited = new Set()) => {
    if (!["object", "array"].includes(getType(o))) {
        return false;
    }
    if (visited.has(o[key])) {
        return true;
    }
    visited.add(o[key]);
    for (const k in o[key]) {
        if (keyHasCircularDependency(o[key], k, visited)) {
            return true;
        }
    }
    visited.delete(o[key]);
    return false;
};
/**
 * detects if an object/array have a circular dependency within its structure.
 * @param o object
 */
export const hasCircularDependency = (o) => {
    if (!["object", "array"].includes(getType(o))) {
        return false;
    }
    for (const key in o) {
        if (keyHasCircularDependency(o, key, new Set([o]))) {
            return true;
        }
    }
    return false;
};
