import { ReactiveArray, cast } from '../../index.js';
import { forEachKey, isArray, isObject } from '../index.js';
/**
 * creates a proxy reactive object,
 * that will trigger the `onValueChanged` when an internal value have changed.
 * @param object target object
 * @param onValueChanged callback
 * @returns proxy object
 */
const createReactive = (object, onValueChanged) => {
    forEachKey((key, value) => {
        if (isObject(value)) {
            object[key] = createReactive(value, onValueChanged);
        }
    }, object);
    let proxied = new Proxy(object, {
        get: (current, key) => {
            return current[key];
        },
        set: (target, key, newValue) => {
            let transformed = newValue;
            if (isObject(newValue)) {
                transformed = createReactive(newValue, onValueChanged);
            }
            cast(target)[key] = transformed;
            onValueChanged();
            return true;
        },
    });
    if (isArray(proxied)) {
        proxied = new ReactiveArray(proxied, onValueChanged);
    }
    return proxied;
};
export default createReactive;
