import { Callback } from '../../index.js';
export default class ReactiveArray<T> extends Array<T> {
    onChanged: Callback;
    constructor(items: Array<T>, onChanged: () => void);
    get items(): Array<T>;
    push(...items: T[]): number;
    pop(): T | undefined;
    shift(): T | undefined;
    unshift(...items: T[]): number;
    reverse(): T[];
    sort(compareFn?: ((a: T, b: T) => number) | undefined): this;
    fill(value: T, start?: number | undefined, end?: number | undefined): this;
    copyWithin(target: number, start: number, end?: number | undefined): this;
}
/**
 * checks if the provided object is instance of `ReactiveArray`
 * @param o object
 */
export declare const isReactiveArray: (o: unknown) => boolean;
/**
 * create a new reactive array instance
 * @param array array to transform
 * @param onChanged change handler
 */
export declare const reactiveArray: <T = unknown>(array: T[], onChanged: () => void) => ReactiveArray<T>;
